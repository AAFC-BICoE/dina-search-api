name: Java CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: mvn install
      - name: Run Checkstyle
        run: mvn checkstyle:check
      - name: Run SpotBugs
        run: mvn spotbugs:check

      - name: Run OWASP dependency-check (only on dev)
        run: mvn org.owasp:dependency-check-maven:check
        if: ${{ github.ref == 'refs/heads/dev' }}

      - name: Extract Version
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          mvn help:evaluate -Dexpression=project.version -q -DforceStdout > version.txt
      - name: Store artifacts
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: |
            version.txt
            search-ws/target/search-ws-*.jar
            search-ws/Dockerfile
            search-cli/target/search-cli-*.jar
            search-cli/Dockerfile
  push:
    name: Build Docker Image and Push to DockerHub
    needs: [build]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/disabled' }}

    steps:
      - name: Download artifacts from build job
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts

      - name: Set VERSION_TAG ENV variable
        run: |
          echo "VERSION_TAG=$(cat version.txt)" >> $GITHUB_ENV
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: ws-builder
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: cli-builder

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build dina-search-ws Image and Push
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.ws-builder.outputs.name }}
          context: search-ws/.
          push: true
          tags: aafcbicoe/dina-search-ws:${{ env.VERSION_TAG }}

      - name: Build dina-search-cli Image and Push
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.cli-builder.outputs.name }}
          context: search-cli/.
          push: true
          tags: aafcbicoe/dina-search-cli:${{ env.VERSION_TAG }}

  deploy:
    name: Deploy search-messaging to Maven Central
    needs: [ build ]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up for Maven Central deploy (master branch only)
        uses: actions/setup-java@v1
        with: # running setup-java again overwrites the settings.xml
          java-version: 11
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_CENTRAL_PW
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Publish search-messaging to Maven Central
        run: mvn -DsignArtifacts=true --batch-mode javadoc:javadoc javadoc:jar deploy -pl search-api-parent
        env:
          MAVEN_USERNAME: aafcbicoe
          MAVEN_CENTRAL_PW: ${{ secrets.MAVEN_CENTRAL_PW }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
